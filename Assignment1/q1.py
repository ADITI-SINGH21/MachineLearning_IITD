import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import math
import statistics
from scipy import stats
data1 = pd.read_excel('data_1.xlsx')
data3 = pd.read_excel('data_3.xlsx')
data1.plot.scatter(x = 'x', y = 'y')
plt.title('Scatter Plot for Data 1')
plt.xlabel('x')
plt.ylabel('y')
plt.show()
pd.DataFrame(data1.x).plot.hist(grid=True, bins=20, rwidth=0.9)
plt.title('Histogram Plot for Data1 column x')
plt.show()
pd.DataFrame(data1.y).plot.hist(grid=True, bins=20, rwidth=0.9)
plt.title('Histogram Plot for Data1 column y')
plt.show()
sns.heatmap(pd.DataFrame(data1.x))
plt.title('Heatmap for x column Data1')
plt.show()
sns.heatmap(pd.DataFrame(data1.y))
plt.title('Heatmap for y column Data1')
plt.show()
sns.boxplot(x=data1.x)
plt.title('Box Plot for x column data1')
plt.show()
sns.boxplot(x=data1.y)
plt.title('Box Plot for y column data1')
plt.show()
data3.plot.scatter(x = 'x', y = 'y')
plt.title('Scatter Plot for Data3')
plt.xlabel('x')
plt.ylabel('y')
plt.show()
pd.DataFrame(data3.x).plot.hist(grid=True, bins=20, rwidth=0.9)
plt.title('Histogram Plot for Data3 column x')
plt.show()
pd.DataFrame(data3.y).plot.hist(grid=True, bins=20, rwidth=0.9)
plt.title('Histogram Plot for Data3 column y')
plt.show()
sns.heatmap(pd.DataFrame(data3.x))
plt.title('Heatmap for x column Data3')
plt.show()
sns.heatmap(pd.DataFrame(data3.y))
plt.title('Heatmap for y column Data3')
plt.show()
sns.boxplot(x=data1.x)
plt.title('Box Plot for x column data3')
plt.show()
sns.boxplot(x=data1.y)
plt.title('Box Plot for y column data1')
plt.show()
print("The mean for data1 column x is",statistics.mean(data1.x))
print("The median for data1 column x is",statistics.median(data1.x))
print("The mode for data1 column x is",statistics.median(data1.x))
print("The variance for data1 column x is",statistics.variance(data1.x))
print("The mean for data1 column y is",statistics.mean(data1.y))
print("The median for data1 column y is",statistics.median(data1.y))
print("The mode for data1 column y is",statistics.median(data1.y))
print("The variance for data1 column y is",statistics.variance(data1.y))
print("The Range for data1 column x is",np.ptp(data1.x))
quartile1x = np.quantile(data1.x, [0.25, 0.75])
print('The Interquartile Range for column x for data 1 is',quartile1x[0]-quartile1x[1])
print("The Range for data1 column y is",np.ptp(data1.y))
quartile1y = np.quantile(data1.y, [0.25, 0.75])
print('The Interquartile Range for column y for data 1 is',quartile1y[0]-quartile1y[1])
print('The Rest Statistics for Data 1 is')
print(data1.describe())
print("The mean for data3 column x is",statistics.mean(data3.x))
print("The median for data3 column x is",statistics.median(data3.x))
print("The mode for data3 column x is",statistics.median(data3.x))
print("The variance for data3 column x is",statistics.variance(data3.x))
print("The mean for data3 column y is",statistics.mean(data3.y))
print("The median for data3 column y is",statistics.median(data3.y))
print("The mode for data3 column y is",statistics.median(data3.y))
print("The variance for data3 column y is",statistics.variance(data3.y))
print("The Range for data3 column x is",np.ptp(data3.x))
quartile3x = np.quantile(data3.x, [0.25, 0.75])
print('The Interquartile Range for column x for data 3 is',quartile3x[0]-quartile3x[1])
print("The Range for data3 column y is",np.ptp(data3.y))
quartile3y = np.quantile(data1.y, [0.25, 0.75])
print('The Interquartile Range for column y for data 3 is',quartile3y[0]-quartile3y[1])
print('The Rest Statistics for Data 3 is')
print(data3.describe())
z1 = np.abs(stats.zscore(data1))
print('The Outliers using Standard Deviation Approach in Data 1 is with index numbers')
print(np.where(z1>3))
print('Outliers using Standard Deviation Approach that are present in data1 are: column x', np.array(data1)[396][0],' column y',np.array(data1)[126][1])
M1x = statistics.median(data1.x)
MAD1x = statistics.median(np.abs(data1.x-M1x))
Zm_1x = 0.6745*(data1.x-M1x)/MAD1x
print('The Outliers using MAD Approach in Data 1 in column x is with index numbers')
print(np.where(Zm_1x>3))
print('Outliers using MAD Approach that are present in data1 in column x are', np.array(data1)[396][0])
M1y = statistics.median(data1.y)
MAD1y = statistics.median(np.abs(data1.y-M1y))
Zm_1y = 0.6745*(data1.y-M1y)/MAD1y
print('The Outliers using MAD Approach in Data 1 in column y is with index numbers')
print(np.where(Zm_1y>3))
print('Outliers using MAD Approach that are present in data1 in column y are', np.array(data1)[126][1])
z3x = np.abs(stats.zscore(data3.x))
print('The Outliers Using Standard Deviation Approach in Data 3 in first column is with index numbers')
print(np.where(z3x>3))
z3y = np.abs(stats.zscore(data3.y))
print('The Outliers Using Standard Deviation Approach in Data 3 in second column is with index numbers')
print(np.where(z3y>3))
M3x = statistics.median(data3.x)
MAD3x = statistics.median(np.abs(data3.x-M3x))
Zm_3x = 0.6745*(data3.x-M3x)/MAD3x
print('The Outliers Using MAD Approach in Data 3 in first column is with index numbers')
print(np.where(Zm_3x>3))
M3y = statistics.median(data3.y)
MAD3y = statistics.median(np.abs(data3.y-M3y))
Zm_3y = 0.6745*(data3.y-M3y)/MAD3y
print('The Outliers Using MAD Approach in Data 3 in second column is with index numbers')
print(np.where(Zm_3y>3))